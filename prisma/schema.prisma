// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String          @id @default(uuid())
  email     String          @unique
  otp       String?
  otpExpiry DateTime?
  name      String?
  image     String?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @default(now())  @updatedAt 

  activities    Activity[]
  projects      Project[]         @relation("UserProjects")
  projectMembers ProjectMember[]
}

model Project {
  id             String          @id @default(uuid())
  name           String
  createdBy      String
  createdAt      DateTime        @default(now())

  tickets        Ticket[]
  members        ProjectMember[]
  creator        User?           @relation("UserProjects", fields: [createdBy], references: [id])
}

model ProjectMember {
  id        String   @id @default(uuid())
  projectId String
  userId    String
  role      String   @default("MEMBER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
}

model Ticket {
  id            String   @id @default(uuid())
  projectId     String
  title         String
  description   String
  status        String   @default("todo")
  updatedBy     String?
  updatedAt     DateTime @default(now())
  updateHistory Json     @default("[]")

  Project       Project  @relation(fields: [projectId], references: [id])
}

model Activity {
  id         String   @id @default(uuid())
  userId     String
  message    String
  isRead     Boolean  @default(false)
  readAt     DateTime?
  expiresAt  DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  user       User     @relation(fields: [userId], references: [id])

  @@index([userId, isRead])
  @@index([expiresAt])
}
